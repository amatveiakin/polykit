<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Fastbuild|x64">
      <Configuration>Fastbuild</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Fastbuild|x64'">
    <BazelCfgOpts>-c fastbuild --cxxopt="/std:c++17" --copt /wd4267</BazelCfgOpts>
    <BazelCfgDirname>x64_windows-fastbuild</BazelCfgDirname>
    <IntDir>$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <!-- Enable optimization in Debug - for profiling.

        A better alternative would be to enable debug symbols in Release, but
        I didn't manage to do that (see below).
     -->
    <BazelCfgOpts>-c dbg --cxxopt="/std:c++17" --copt /wd4267 --copt /O2</BazelCfgOpts>
    <BazelCfgDirname>x64_windows-dbg</BazelCfgDirname>
    <IntDir>$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <!-- Ideally should find a way to add debug info here. Tried:
            * /Zi - for the debug indo (a.k.a. PDB)
            * /INCREMENTAL:NO - linker flag recommended for release builds with debug info
            * /DEBUG

        Problem: fatal error C1041 from trying to write into the same PDB
        file simultaneously.
        Solutions:
            * /FS - didn't work
            * disable bazel parallelism: `jobs 1` - worked

        Problem: PDB symbol is not loaded.
        Solution: unknown.
     -->
    <BazelCfgOpts>-c opt --cxxopt="/std:c++17" --copt /wd4267</BazelCfgOpts>
    <BazelCfgDirname>x64_windows-opt</BazelCfgDirname>
    <NMakeBuildCommandLine>
    </NMakeBuildCommandLine>
    <IntDir>$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Label="Globals">
    <ProjectName>//:workspace</ProjectName>
    <VCProjectVersion>15.0</VCProjectVersion>
    <ProjectGuid>{53AE56A2-0000-3000-A000-0000049170C8}</ProjectGuid>
    <Keyword>MakeFileProj</Keyword>
    <UseHostCompilerIfAvailable>false</UseHostCompilerIfAvailable>
    <NMakeOutput>..\bazel-out\$(BazelCfgDirname)\bin\.\workspace.exe</NMakeOutput>
    <OutDir>..\bazel-out\$(BazelCfgDirname)\bin\.\</OutDir>
    <TargetName>workspace</TargetName>
    <TargetExt>exe</TargetExt>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Fastbuild'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Debug'" Label="Configuration">
    <UseDebugLibraries>true</UseDebugLibraries>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Release'" Label="Configuration">
    <UseDebugLibraries>false</UseDebugLibraries>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <!-- Hack to get most includes working -->
  <PropertyGroup>
    <IncludePath>..;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Platform)'=='Win32'">
    <NMakePreprocessorDefinitions>WIN32;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <NMakePreprocessorDefinitions>_DEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <NMakePreprocessorDefinitions>NDEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
  </PropertyGroup>
  <PropertyGroup>
    <NMakePreprocessorDefinitions>;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
    <NMakeIncludeSearchPath>;$(AdditionalIncludeDirectories)</NMakeIncludeSearchPath>
    <AdditionalOptions> %(AdditionalOptions)</AdditionalOptions>
  </PropertyGroup>
  <ItemGroup>
    <ClCompile Include="..\workspace.cpp">
    </ClCompile>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <Target Name="Build">
    <Message Text="NMakePreprocessorDefinitions = $(NMakePreprocessorDefinitions)" />
    <Exec Command="&quot;C:\Bazel\bazel.exe&quot; build $(BazelCfgOpts) //:workspace" Outputs="workspace.exe" WorkingDirectory=".." />
  </Target>
  <Target Name="Clean">
    <Exec Command="&quot;C:\Bazel\bazel.exe&quot; clean $(BazelCfgOpts)" WorkingDirectory=".." />
  </Target>
  <!-- Override PrepareForBuild so it doesn't try to create OutDir and interfere with bazel. -->
  <Target Name="PrepareForBuild" DependsOnTargets="$(PrepareForBuildDependsOn)">
  </Target>
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>