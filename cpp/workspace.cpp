#include <iostream>
#include <sstream>

#include "absl/debugging/failure_signal_handler.h"
#include "absl/debugging/symbolize.h"

#include "lib/algebra.h"
#include "lib/coalgebra.h"
#include "lib/cotheta.h"
#include "lib/format.h"
#include "lib/lyndon.h"
#include "lib/mystic_algebra.h"
#include "lib/polylog_cross_ratio.h"
#include "lib/polylog.h"
#include "lib/iterated_integral.h"
#include "lib/polylog_quadrangle.h"
#include "lib/profiler.h"
#include "lib/projection.h"
#include "lib/sequence_iteration.h"
#include "lib/shuffle.h"
#include "lib/theta.h"


// auto lhs = Lido2(1,2,3,4,5,6);
// auto rhs = (
//   + I(1,3,5,2)
//   - I(1,3,6,2)
//   - I(1,4,5,2)
//   + I(1,4,6,2)
// );

// auto lhs = Lido3(1,2,3,4,5,6);
// auto rhs = -(
//   + I(1,2,3,5,2)
//   - I(1,2,3,6,2)
//   - I(1,2,4,5,2)
//   + I(1,2,4,6,2)
//   + I(1,3,4,5,2)
//   - I(1,3,4,6,2)
//   - I(1,3,6,5,2)
//   + I(1,3,6,6,2)
//   - I(1,4,4,5,2)
//   + I(1,4,4,6,2)
//   + I(1,4,6,5,2)
//   - I(1,4,6,6,2)
//   - I(1,6,3,5,2)
//   + I(1,6,3,6,2)
//   + I(1,6,4,5,2)
//   - I(1,6,4,6,2)
// );

// auto lhs = Lido4(1,2,3,4,5,6);
// auto rhs = (
//   + I(1,2,2,3,5,2)
//   - I(1,2,2,3,6,2)
//   - I(1,2,2,4,5,2)
//   + I(1,2,2,4,6,2)
//   + I(1,2,3,4,5,2)
//   - I(1,2,3,4,6,2)
//   - I(1,2,3,6,5,2)
//   + I(1,2,3,6,6,2)
//   - I(1,2,4,4,5,2)
//   + I(1,2,4,4,6,2)
//   + I(1,2,4,6,5,2)
//   - I(1,2,4,6,6,2)
//   - I(1,2,6,3,5,2)
//   + I(1,2,6,3,6,2)
//   + I(1,2,6,4,5,2)
//   - I(1,2,6,4,6,2)
//   + I(1,3,4,4,5,2)
//   - I(1,3,4,4,6,2)
//   - I(1,3,4,6,5,2)
//   + I(1,3,4,6,6,2)
//   - I(1,3,6,4,5,2)
//   + I(1,3,6,4,6,2)
//   + I(1,3,6,6,5,2)
//   - I(1,3,6,6,6,2)
//   - I(1,4,4,4,5,2)
//   + I(1,4,4,4,6,2)
//   + I(1,4,4,6,5,2)
//   - I(1,4,4,6,6,2)
//   + I(1,4,6,4,5,2)
//   - I(1,4,6,4,6,2)
//   - I(1,4,6,6,5,2)
//   + I(1,4,6,6,6,2)
//   - I(1,6,2,3,5,2)
//   + I(1,6,2,3,6,2)
//   + I(1,6,2,4,5,2)
//   - I(1,6,2,4,6,2)
//   - I(1,6,3,4,5,2)
//   + I(1,6,3,4,6,2)
//   + I(1,6,3,6,5,2)
//   - I(1,6,3,6,6,2)
//   + I(1,6,4,4,5,2)
//   - I(1,6,4,4,6,2)
//   - I(1,6,4,6,5,2)
//   + I(1,6,4,6,6,2)
//   + I(1,6,6,3,5,2)
//   - I(1,6,6,3,6,2)
//   - I(1,6,6,4,5,2)
//   + I(1,6,6,4,6,2)
// );

// auto lhs = Lido5(1,2,3,4,5,6);
// auto rhs = -(
//   + I(1,2,2,2,3,5,2)
//   - I(1,2,2,2,3,6,2)
//   - I(1,2,2,2,4,5,2)
//   + I(1,2,2,2,4,6,2)
//   + I(1,2,2,3,4,5,2)
//   - I(1,2,2,3,4,6,2)
//   - I(1,2,2,3,6,5,2)
//   + I(1,2,2,3,6,6,2)
//   - I(1,2,2,4,4,5,2)
//   + I(1,2,2,4,4,6,2)
//   + I(1,2,2,4,6,5,2)
//   - I(1,2,2,4,6,6,2)
//   - I(1,2,2,6,3,5,2)
//   + I(1,2,2,6,3,6,2)
//   + I(1,2,2,6,4,5,2)
//   - I(1,2,2,6,4,6,2)
//   + I(1,2,3,4,4,5,2)
//   - I(1,2,3,4,4,6,2)
//   - I(1,2,3,4,6,5,2)
//   + I(1,2,3,4,6,6,2)
//   - I(1,2,3,6,4,5,2)
//   + I(1,2,3,6,4,6,2)
//   + I(1,2,3,6,6,5,2)
//   - I(1,2,3,6,6,6,2)
//   - I(1,2,4,4,4,5,2)
//   + I(1,2,4,4,4,6,2)
//   + I(1,2,4,4,6,5,2)
//   - I(1,2,4,4,6,6,2)
//   + I(1,2,4,6,4,5,2)
//   - I(1,2,4,6,4,6,2)
//   - I(1,2,4,6,6,5,2)
//   + I(1,2,4,6,6,6,2)
//   - I(1,2,6,2,3,5,2)
//   + I(1,2,6,2,3,6,2)
//   + I(1,2,6,2,4,5,2)
//   - I(1,2,6,2,4,6,2)
//   - I(1,2,6,3,4,5,2)
//   + I(1,2,6,3,4,6,2)
//   + I(1,2,6,3,6,5,2)
//   - I(1,2,6,3,6,6,2)
//   + I(1,2,6,4,4,5,2)
//   - I(1,2,6,4,4,6,2)
//   - I(1,2,6,4,6,5,2)
//   + I(1,2,6,4,6,6,2)
//   + I(1,2,6,6,3,5,2)
//   - I(1,2,6,6,3,6,2)
//   - I(1,2,6,6,4,5,2)
//   + I(1,2,6,6,4,6,2)
//   + I(1,3,4,4,4,5,2)
//   - I(1,3,4,4,4,6,2)
//   - I(1,3,4,4,6,5,2)
//   + I(1,3,4,4,6,6,2)
//   - I(1,3,4,6,4,5,2)
//   + I(1,3,4,6,4,6,2)
//   + I(1,3,4,6,6,5,2)
//   - I(1,3,4,6,6,6,2)
//   - I(1,3,6,4,4,5,2)
//   + I(1,3,6,4,4,6,2)
//   + I(1,3,6,4,6,5,2)
//   - I(1,3,6,4,6,6,2)
//   + I(1,3,6,6,4,5,2)
//   - I(1,3,6,6,4,6,2)
//   - I(1,3,6,6,6,5,2)
//   + I(1,3,6,6,6,6,2)
//   - I(1,4,4,4,4,5,2)
//   + I(1,4,4,4,4,6,2)
//   + I(1,4,4,4,6,5,2)
//   - I(1,4,4,4,6,6,2)
//   + I(1,4,4,6,4,5,2)
//   - I(1,4,4,6,4,6,2)
//   - I(1,4,4,6,6,5,2)
//   + I(1,4,4,6,6,6,2)
//   + I(1,4,6,4,4,5,2)
//   - I(1,4,6,4,4,6,2)
//   - I(1,4,6,4,6,5,2)
//   + I(1,4,6,4,6,6,2)
//   - I(1,4,6,6,4,5,2)
//   + I(1,4,6,6,4,6,2)
//   + I(1,4,6,6,6,5,2)
//   - I(1,4,6,6,6,6,2)
//   - I(1,6,2,2,3,5,2)
//   + I(1,6,2,2,3,6,2)
//   + I(1,6,2,2,4,5,2)
//   - I(1,6,2,2,4,6,2)
//   - I(1,6,2,3,4,5,2)
//   + I(1,6,2,3,4,6,2)
//   + I(1,6,2,3,6,5,2)
//   - I(1,6,2,3,6,6,2)
//   + I(1,6,2,4,4,5,2)
//   - I(1,6,2,4,4,6,2)
//   - I(1,6,2,4,6,5,2)
//   + I(1,6,2,4,6,6,2)
//   + I(1,6,2,6,3,5,2)
//   - I(1,6,2,6,3,6,2)
//   - I(1,6,2,6,4,5,2)
//   + I(1,6,2,6,4,6,2)
//   - I(1,6,3,4,4,5,2)
//   + I(1,6,3,4,4,6,2)
//   + I(1,6,3,4,6,5,2)
//   - I(1,6,3,4,6,6,2)
//   + I(1,6,3,6,4,5,2)
//   - I(1,6,3,6,4,6,2)
//   - I(1,6,3,6,6,5,2)
//   + I(1,6,3,6,6,6,2)
//   + I(1,6,4,4,4,5,2)
//   - I(1,6,4,4,4,6,2)
//   - I(1,6,4,4,6,5,2)
//   + I(1,6,4,4,6,6,2)
//   - I(1,6,4,6,4,5,2)
//   + I(1,6,4,6,4,6,2)
//   + I(1,6,4,6,6,5,2)
//   - I(1,6,4,6,6,6,2)
//   + I(1,6,6,2,3,5,2)
//   - I(1,6,6,2,3,6,2)
//   - I(1,6,6,2,4,5,2)
//   + I(1,6,6,2,4,6,2)
//   + I(1,6,6,3,4,5,2)
//   - I(1,6,6,3,4,6,2)
//   - I(1,6,6,3,6,5,2)
//   + I(1,6,6,3,6,6,2)
//   - I(1,6,6,4,4,5,2)
//   + I(1,6,6,4,4,6,2)
//   + I(1,6,6,4,6,5,2)
//   - I(1,6,6,4,6,6,2)
//   - I(1,6,6,6,3,5,2)
//   + I(1,6,6,6,3,6,2)
//   + I(1,6,6,6,4,5,2)
//   - I(1,6,6,6,4,6,2)
// );


int main(int argc, char *argv[]) {
  absl::InitializeSymbolizer(argv[0]);
  absl::InstallFailureSignalHandler({});

  Profiler profiler;

  auto lhs = Lido2(1,2,3,4,5,6);
  auto rhs =
  + (
    + I(1,3,5,6)
    - I(1,3,6,6)
    - I(1,4,5,6)
    + I(1,4,6,6)
  )
  - (
    + I(2,3,5,6)
    - I(2,3,6,6)
    - I(2,4,5,6)
    + I(2,4,6,6)
  );

  // auto lhs =
  //   + I(1,.....,6)
  //   - I(2,.....,6)
  // ;
  // auto rhs =
  //   + I(1,.....,2)
  // ;

  auto diff = lhs - rhs;
  auto diff_lyndon = to_lyndon_basis(diff);

  profiler.finish("program");

  // std::cout << "\n";
  // std::cout << "LHS " << lhs << "\n";
  // std::cout << "RHS " << rhs << "\n";
  std::cout << "Diff before Lyndon " << diff << "\n";
  std::cout << "Diff after Lyndon " << diff_lyndon << "\n";

  // int axis = 2;
  // std::cout << "\n";
  // std::cout << "LHS " << project_on(axis, lhs) << "\n";
  // std::cout << "RHS " << project_on(axis, rhs) << "\n";
  // std::cout << "Diff before Lyndon " << project_on(axis, diff) << "\n";
  // std::cout << "Diff after Lyndon " << project_on(axis, diff_lyndon) << "\n";

  return 0;


  // auto lhs = Lido2(1,2,3,4,5,6);

  // std::vector terms = {
  //   I(1,2,3,6),
  //   I(1,2,4,6),
  //   I(1,2,5,6),
  //   I(1,3,4,6),
  //   I(1,3,5,6),
  //   I(1,4,5,6),

  //   // I(6,2,3,1),
  //   // I(6,2,4,1),
  //   // I(6,2,5,1),
  //   // I(6,3,4,1),
  //   // I(6,3,5,1),
  //   // I(6,4,5,1),
  // };
  // const int n = terms.size();
  // DeltaExpr best;
  // int best_diff_norm = std::numeric_limits<int>::max();

  // for (const auto& signs : all_squences(3, n)) {
  //   DeltaExpr rhs;
  //   for (int i = 0; i < n; ++i) {
  //     switch (signs.at(i)) {
  //       case 0:
  //         rhs += terms.at(i);
  //         break;
  //       case 1:
  //         rhs -= terms.at(i);
  //         break;
  //       case 2:
  //         break;
  //       default:
  //         FAIL("Unexpected sign");
  //     }
  //   }
  //   auto diff = to_lyndon_basis(lhs - rhs);
  //   if (diff.l1_norm() < best_diff_norm) {
  //     best = rhs;
  //     best_diff_norm = diff.l1_norm();
  //   }
  // }
  // auto rhs = best;
  // auto diff = lhs - rhs;
  // auto diff_lyndon = to_lyndon_basis(diff);

  // profiler.finish("program");

  // std::cout << "\n";
  // std::cout << "LHS " << lhs << "\n";
  // std::cout << "RHS " << rhs << "\n";
  // std::cout << "Diff before Lyndon " << diff << "\n";
  // std::cout << "Diff after Lyndon " << diff_lyndon << "\n";
}
