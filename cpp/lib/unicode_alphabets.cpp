// Useful link: https://gist.githubusercontent.com/jaantollander/b49132a36b035cdfe05345dd0c7edf0f

#include "unicode_alphabets.h"

#include "util.h"


std::optional<std::string> unicode_subscript(char ch) {
  static const absl::flat_hash_map<char, std::string> map = {
    {'+', "₊"},
    {'-', "₋"},
    {'0', "₀"},
    {'1', "₁"},
    {'2', "₂"},
    {'3', "₃"},
    {'4', "₄"},
    {'5', "₅"},
    {'6', "₆"},
    {'7', "₇"},
    {'8', "₈"},
    {'9', "₉"},
  };
  return value_or(map, ch);
}

std::optional<std::string> unicode_superscript(char ch) {
  static const absl::flat_hash_map<char, std::string> map = {
    {'+', "⁺"},
    {'-', "⁻"},
    {'0', "⁰"},
    {'1', "¹"},
    {'2', "²"},
    {'3', "³"},
    {'4', "⁴"},
    {'5', "⁵"},
    {'6', "⁶"},
    {'7', "⁷"},
    {'8', "⁸"},
    {'9', "⁹"},
  };
  return value_or(map, ch);
}

std::optional<std::string> unicode_mathcal(char ch) {
  static const absl::flat_hash_map<char, std::string> map = {
    {'A', "𝒜"},
    {'B', "ℬ"},
    {'C', "𝒞"},
    {'D', "𝒟"},
    {'E', "ℰ"},
    {'F', "ℱ"},
    {'G', "𝒢"},
    {'H', "ℋ"},
    {'I', "ℐ"},
    {'J', "𝒥"},
    {'K', "𝒦"},
    {'L', "ℒ"},
    {'M', "ℳ"},
    {'N', "𝒩"},
    {'O', "𝒪"},
    {'P', "𝒫"},
    {'Q', "𝒬"},
    {'R', "ℛ"},
    {'S', "𝒮"},
    {'T', "𝒯"},
    {'U', "𝒰"},
    {'V', "𝒱"},
    {'W', "𝒲"},
    {'X', "𝒳"},
    {'Y', "𝒴"},
    {'Z', "𝒵"},
    {'a', "𝒶"},
    {'b', "𝒷"},
    {'c', "𝒸"},
    {'d', "𝒹"},
    {'e', "ℯ"},
    {'f', "𝒻"},
    {'g', "ℊ"},
    {'h', "𝒽"},
    {'i', "𝒾"},
    {'j', "𝒿"},
    {'k', "𝓀"},
    {'l', "𝓁"},
    {'m', "𝓂"},
    {'n', "𝓃"},
    {'o', "ℴ"},
    {'p', "𝓅"},
    {'q', "𝓆"},
    {'r', "𝓇"},
    {'s', "𝓈"},
    {'t', "𝓉"},
    {'u', "𝓊"},
    {'v', "𝓋"},
    {'w', "𝓌"},
    {'x', "𝓍"},
    {'y', "𝓎"},
    {'z', "𝓏"},
  };
  return value_or(map, ch);
}

std::optional<std::string> unicode_mathbb(char ch) {
  static const absl::flat_hash_map<char, std::string> map = {
    {'0', "𝟘"},
    {'1', "𝟙"},
    {'2', "𝟚"},
    {'3', "𝟛"},
    {'4', "𝟜"},
    {'5', "𝟝"},
    {'6', "𝟞"},
    {'7', "𝟟"},
    {'8', "𝟠"},
    {'9', "𝟡"},
    {'A', "𝔸"},
    {'B', "𝔹"},
    {'C', "ℂ"},
    {'D', "𝔻"},
    {'E', "𝔼"},
    {'F', "𝔽"},
    {'G', "𝔾"},
    {'H', "ℍ"},
    {'I', "𝕀"},
    {'J', "𝕁"},
    {'K', "𝕂"},
    {'L', "𝕃"},
    {'M', "𝕄"},
    {'N', "ℕ"},
    {'O', "𝕆"},
    {'P', "ℙ"},
    {'Q', "ℚ"},
    {'R', "ℝ"},
    {'S', "𝕊"},
    {'T', "𝕋"},
    {'U', "𝕌"},
    {'V', "𝕍"},
    {'W', "𝕎"},
    {'X', "𝕏"},
    {'Y', "𝕐"},
    {'Z', "ℤ"},
    {'a', "𝕒"},
    {'b', "𝕓"},
    {'c', "𝕔"},
    {'d', "𝕕"},
    {'e', "𝕖"},
    {'f', "𝕗"},
    {'g', "𝕘"},
    {'h', "𝕙"},
    {'i', "𝕚"},
    {'j', "𝕛"},
    {'k', "𝕜"},
    {'l', "𝕝"},
    {'m', "𝕞"},
    {'n', "𝕟"},
    {'o', "𝕠"},
    {'p', "𝕡"},
    {'q', "𝕢"},
    {'r', "𝕣"},
    {'s', "𝕤"},
    {'t', "𝕥"},
    {'u', "𝕦"},
    {'v', "𝕧"},
    {'w', "𝕨"},
    {'x', "𝕩"},
    {'y', "𝕪"},
    {'z', "𝕫"},
  };
  return value_or(map, ch);
}
